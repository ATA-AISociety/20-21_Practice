import numpy as np
import matplotlib.pyplot as plt
import os
import cv2
import random
import pickle
import tensorflow as tf
from tensorflow import keras
'''
IMG_SIZE = 64 #Resize Images

training_data = []
def create_training_data():

    directory = r"C:/Users/Jorda_000/Desktop/Dataset"
    categories = ["Anime", "Humans"]
    for cat in categories:
        path = os.path.join(directory, cat)# Path To folder containing images
        class_num = categories.index(cat)
        for img in os.listdir(path):
            try:
                img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE) # Grabs images and converts them to greyscale
                new_images = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  # new images will be a 64 by 64 image
                training_data.append([new_images, class_num])
            except Exception as e:
                print("passing at " + str(class_num))
                pass


create_training_data()
print('Done with dataset')
print(len(training_data))

random.shuffle(training_data)

#for sample in training_images:
#    print(sample[1])

training_images = []
training_labels = []

for features, labels in training_data:
    training_images.append(features)
    training_labels.append(labels)

#Reshaping is important for the Flatten() command. Flatten only accepts 3 arguments
training_images = np.array(training_images).reshape(-1, IMG_SIZE, IMG_SIZE) #Note -1 is a catchall and 1 is only because the images are greuscale


#To save our data so it doesn't always have to be loaded
pickle_out = open("training_images.pickle", "wb")
pickle.dump(training_images, pickle_out)
pickle_out.close()

pickle_out = open("training_labels.pickle", "wb")
pickle.dump(training_labels, pickle_out)
pickle_out.close()
'''
pickle_in= open("training_images.pickle", "rb")
training_images = pickle.load(pickle_in)

pickle_in= open("training_labels.pickle", "rb")
training_labels = pickle.load(pickle_in)

print(len(training_images))
#End of pickle section (optional for now)

class_names = ["Anime Face, Human Face"]

model = keras.Sequential([keras.layers.Flatten(input_shape=(64,64)), keras.layers.Dense(128, activation=tf.nn.relu), keras.layers.Dense(10, activation=tf.nn.softmax)])
model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
model.fit(training_images, training_labels, epochs=5)
